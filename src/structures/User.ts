import BaseUser from '../shared/structures/User.js';
import Scene from './Scene.js';
import Group from './Group.js';
import Users from '../shared/models/TgUsersModel.js';
import Cache from '../lib/Cache.js';
import { KeyboardButton } from 'node-telegram-bot-api';

// TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π

export default class User extends BaseUser {
    scene?: Scene;

    group?: Group;
    notifications: boolean = false;
    emoji: boolean = true;
    showSettings: boolean = true;
    showTeachers: boolean = true;
    token?: string | null;

    /**
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
     */
    dataBuffer: {
        id: number;
        inst_id?: number;
        kurs?: number;
    }[] = [];

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
     */
    async init() {
        let userData = await Users.findOne({ userId: this.id }).exec();

        if (userData?.inst_id && userData?.group) {
            this.group = Cache.getGroup(userData.group, userData.inst_id);
            this.notifications = userData?.notifications ?? false;
            this.emoji = userData?.emoji ?? true;
            this.showSettings = userData?.showSettings ?? true;
            this.showTeachers = userData?.showTeachers ?? true;
            this.token = userData?.token;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏ –≤ –∫–ª–∞—Å—Å–µ
     */
    async updateData(opt: {
        inst_id?: number;
        group?: string;
        notifications?: boolean;
        emoji?: boolean;
        showSettings?: boolean;
        showTeachers?: boolean;
    }) {
        await Users.findOneAndUpdate({ userId: this.id }, opt, { upsert: true });

        if (opt.inst_id != undefined && opt.group != undefined) this.group = Cache.getGroup(opt.group, opt.inst_id); // this.setGroup(opt.group, opt.instId);

        if (opt.notifications != undefined) this.notifications = opt.notifications;
        if (opt.emoji != undefined) this.emoji = opt.emoji;
        if (opt.showSettings != undefined) this.showSettings = opt.showSettings;
        if (opt.showTeachers != undefined) this.showTeachers = opt.showTeachers;
    }

    setScene(sceneName: string) {
        this.scene = Cache.scenes.find((x) => x.name == sceneName);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
     */
    async setToken(token: string) {
        this.token = token;

        let userData = await Users.findOne({ userId: this.id }).exec();

        if (userData) {
            userData.token = token;
            userData.save().catch(console.log);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
     */
    async delete() {
        return Users.findOneAndDelete({ userId: this.id });
        // TODO: –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ Cache.users
    }

    async updateLastActivity() {
        let user = await Users.findOne({ userId: this.id }).exec();

        if (user) {
            user.lastActivity = new Date();
            user.save().catch(console.log);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    getMainKeyboard(): KeyboardButton[][] {
        let arr = [
            [
                {
                    text: (this.emoji ? '‚è∫Ô∏è ' : '') + '–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ',
                },
                {
                    text: (this.emoji ? '‚ñ∂Ô∏è ' : '') + '–ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ',
                },
            ],
            [
                {
                    text: (this.emoji ? '‚è© ' : '') + '–ë–ª–∏–∂–∞–π—à–µ–µ',
                },
                {
                    text: (this.emoji ? 'üîÄ ' : '') + '–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å',
                },
            ],
        ];

        if (this.showTeachers) arr.push([{ text: (this.emoji ? 'üë®‚Äçüè´ ' : '') + '–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π' }]);
        if (this.showSettings) arr.push([{ text: (this.emoji ? '‚öôÔ∏è ' : '') + '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }]);

        return arr;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getSettingsKeyboard(): KeyboardButton[][] {
        return [
            [
                {
                    text: this.notifications
                        ? (this.emoji ? 'üîï ' : '') + '–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
                        : (this.emoji ? 'üîî ' : '') + '–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                },
                {
                    text: this.emoji ? (this.emoji ? 'üôÖ‚Äç‚ôÇÔ∏è ' : '') + '–í—ã–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏' : '–í–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏', // –¢—É—Ç –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ —Ç—É—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                },
            ],
            [
                {
                    text: (this.emoji ? '‚öôÔ∏è ' : '') + '–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞',
                },
                {
                    text: this.showSettings ? (this.emoji ? '‚öôÔ∏è ' : '') + '–£–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : (this.emoji ? '‚öôÔ∏è ' : '') + '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                },
            ],
            [
                {
                    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –µ–º–æ–¥–∑–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ
                    text: this.showTeachers
                        ? (this.emoji ? '‚öôÔ∏è ' : '') + '–£–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π'
                        : (this.emoji ? '‚öôÔ∏è ' : '') + '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π',
                },
            ],
            [
                {
                    text: (this.emoji ? 'üõë ' : '') + '–û—Ç–º–µ–Ω–∞',
                },
            ],
        ];
    }
}
